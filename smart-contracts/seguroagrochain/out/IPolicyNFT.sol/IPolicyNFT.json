{"abi":[{"type":"function","name":"burnPolicy","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getPolicyId","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"policyId","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"mintPolicy","inputs":[{"name":"policyId","type":"uint256","internalType":"uint256"},{"name":"to","type":"address","internalType":"address"}],"outputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"policyExists","inputs":[{"name":"policyId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"exists","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"burnPolicy(uint256)":"f457a0fe","getPolicyId(uint256)":"205de66a","mintPolicy(uint256,address)":"54998518","policyExists(uint256)":"0fe92cae"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPolicyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintPolicy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"}],\"name\":\"policyExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"NFT representation of insurance policies\",\"kind\":\"dev\",\"methods\":{\"burnPolicy(uint256)\":{\"details\":\"Burn a policy NFT (e.g., when policy expires or is fully claimed)\",\"params\":{\"tokenId\":\"ID of the NFT to burn\"}},\"getPolicyId(uint256)\":{\"details\":\"Get policy ID associated with an NFT\",\"params\":{\"tokenId\":\"ID of the NFT\"},\"returns\":{\"policyId\":\"ID of the associated insurance policy\"}},\"mintPolicy(uint256,address)\":{\"details\":\"Mint a new policy NFT\",\"params\":{\"policyId\":\"ID of the insurance policy\",\"to\":\"Address to mint the NFT to\"},\"returns\":{\"tokenId\":\"ID of the minted NFT\"}},\"policyExists(uint256)\":{\"details\":\"Check if a policy NFT exists\",\"params\":{\"policyId\":\"ID of the insurance policy\"},\"returns\":{\"exists\":\"Whether the NFT exists\"}}},\"title\":\"PolicyNFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allows for secondary market trading of policies\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IPolicyNFT.sol\":\"IPolicyNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink/=lib/chainlink/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\"],\"viaIR\":true},\"sources\":{\"src/IPolicyNFT.sol\":{\"keccak256\":\"0xfa0fd5d6bc5dde26372250e7ee2878d06b8e8860204ac87b8583ce96a528937a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fca103a1272243ae44e11d03f254799b5a3c71660089d021c430c46550271a7\",\"dweb:/ipfs/QmYKWs4v5gpRZiuErFcCneXNikfpqjPBhMQ9icqe7eU4BJ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"burnPolicy"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getPolicyId","outputs":[{"internalType":"uint256","name":"policyId","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"policyId","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"mintPolicy","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"policyId","type":"uint256"}],"stateMutability":"view","type":"function","name":"policyExists","outputs":[{"internalType":"bool","name":"exists","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"burnPolicy(uint256)":{"details":"Burn a policy NFT (e.g., when policy expires or is fully claimed)","params":{"tokenId":"ID of the NFT to burn"}},"getPolicyId(uint256)":{"details":"Get policy ID associated with an NFT","params":{"tokenId":"ID of the NFT"},"returns":{"policyId":"ID of the associated insurance policy"}},"mintPolicy(uint256,address)":{"details":"Mint a new policy NFT","params":{"policyId":"ID of the insurance policy","to":"Address to mint the NFT to"},"returns":{"tokenId":"ID of the minted NFT"}},"policyExists(uint256)":{"details":"Check if a policy NFT exists","params":{"policyId":"ID of the insurance policy"},"returns":{"exists":"Whether the NFT exists"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/contracts/=lib/chainlink/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","chainlink/=lib/chainlink/","ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/IPolicyNFT.sol":"IPolicyNFT"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"src/IPolicyNFT.sol":{"keccak256":"0xfa0fd5d6bc5dde26372250e7ee2878d06b8e8860204ac87b8583ce96a528937a","urls":["bzz-raw://2fca103a1272243ae44e11d03f254799b5a3c71660089d021c430c46550271a7","dweb:/ipfs/QmYKWs4v5gpRZiuErFcCneXNikfpqjPBhMQ9icqe7eU4BJ"],"license":"MIT"}},"version":1},"id":99}